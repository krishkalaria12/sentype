{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Voice-Controlled Tech Quiz Game</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 2rem;\n            background-color: #f4f4f4;\n            color: #FFFFFF;\n        }\n        h1, h2, h3 {\n            color: #FFFFFF;\n        }\n        ul {\n            margin-left: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Project Title: Voice-Controlled Tech Quiz Game</h1>\n    <h2>Team Name: Sentinels</h2>\n    <h3>Description</h3>\n    <p>The Voice-Controlled Tech Quiz Game is a cutting-edge, web-based project designed to challenge users' technology knowledge while offering a seamless hands-free experience. The game uses the Web Speech API to enable full voice interaction, making it accessible and engaging for a wide range of users.</p>\n\n    <h3>Key Features</h3>\n    <ul>\n        <li><strong>Voice-Activated Controls</strong>: Users can start the game, choose difficulty levels, and answer questions using voice commands. Web Speech API integration ensures smooth voice recognition and real-time response.</li>\n        <li><strong>Text-to-Speech Feedback</strong>: The game reads questions aloud and confirms user responses through voice, providing immediate feedback on answers.</li>\n        <li><strong>Cross-Platform Support</strong>: The game is built with HTML, CSS, and JavaScript, ensuring compatibility with various web browsers and platforms, including desktop and mobile devices.</li>\n    </ul>\n\n    <h3>Technical Details</h3>\n    <ul>\n        <li><strong>Web APIs Used</strong>: Web Speech API for both voice recognition (input) and text-to-speech (output).</li>\n        <li><strong>Front-End Stack</strong>: HTML, CSS, and JavaScript</li>\n    </ul>\n\n    <h3>Potential Future Enhancements</h3>\n    <ul>\n        <li><strong>Custom Question Banks</strong>: Allow users to create and play personalized quizzes.</li>\n        <li><strong>Multiplayer Mode</strong>: Introduce competitive play where users can challenge friends.</li>\n        <li><strong>Achievements and Badges</strong>: Implement a gamification system to award users for milestones reached.</li>\n    </ul>\n\n    <h3>Benefits</h3>\n    <p>Provides a hands-free, engaging experience ideal for tech enthusiasts. Enhances accessibility for users who prefer or require voice interactions. Encourages continuous learning with an interactive format.</p>\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Voice-Controlled Tech Quiz Game</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 2rem;\n            background-color: #f4f4f4;\n            color: #FFFFFF;\n        }\n        h1, h2, h3 {\n            color: #FFFFFF;\n        }\n        ul {\n            margin-left: 20px;\n        }\n    </style>\n\n\n    <h1>Project Title: Voice-Controlled Tech Quiz Game</h1>\n    <h2>Team Name: Sentinels</h2>\n    <h3>Description</h3>\n    <p>The Voice-Controlled Tech Quiz Game is a cutting-edge, web-based project designed to challenge users' technology knowledge while offering a seamless hands-free experience. The game uses the Web Speech API to enable full voice interaction, making it accessible and engaging for a wide range of users.</p>\n\n    <h3>Key Features</h3>\n    <ul>\n        <li><strong>Voice-Activated Controls</strong>: Users can start the game, choose difficulty levels, and answer questions using voice commands. Web Speech API integration ensures smooth voice recognition and real-time response.</li>\n        <li><strong>Text-to-Speech Feedback</strong>: The game reads questions aloud and confirms user responses through voice, providing immediate feedback on answers.</li>\n        <li><strong>Cross-Platform Support</strong>: The game is built with HTML, CSS, and JavaScript, ensuring compatibility with various web browsers and platforms, including desktop and mobile devices.</li>\n    </ul>\n\n    <h3>Technical Details</h3>\n    <ul>\n        <li><strong>Web APIs Used</strong>: Web Speech API for both voice recognition (input) and text-to-speech (output).</li>\n        <li><strong>Front-End Stack</strong>: HTML, CSS, and JavaScript</li>\n    </ul>\n\n    <h3>Potential Future Enhancements</h3>\n    <ul>\n        <li><strong>Custom Question Banks</strong>: Allow users to create and play personalized quizzes.</li>\n        <li><strong>Multiplayer Mode</strong>: Introduce competitive play where users can challenge friends.</li>\n        <li><strong>Achievements and Badges</strong>: Implement a gamification system to award users for milestones reached.</li>\n    </ul>\n\n    <h3>Benefits</h3>\n    <p>Provides a hands-free, engaging experience ideal for tech enthusiasts. Enhances accessibility for users who prefer or require voice interactions. Encourages continuous learning with an interactive format.</p>\n\n\n",
      "type": "html"
    },
    {
      "code": "<!DOCTYPE html><html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Voice Quiz Game</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      margin: 0;\n      background-color: #f0f4f8;\n      flex-direction: column;\n    }\n\n    .container {\n      text-align: center;\n      max-width: 600px;\n    }\n\n    h1 {\n      color: #333;\n    }\n\n    button {\n      background-color: #4CAF50;\n      color: white;\n      padding: 10px 20px;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-size: 18px;\n      margin-top: 20px;\n    }\n\n    button:disabled {\n      background-color: #ddd;\n      cursor: not-allowed;\n    }\n\n    .hint {\n      margin-top: 20px;\n      font-size: 20px;\n      color: #555;\n    }\n\n    #status {\n      font-size: 18px;\n      margin-top: 15px;\n      color: #888;\n    }\n\n    #score {\n      font-size: 22px;\n      margin-top: 20px;\n      color: #333;\n    }\n\n    #nameInput {\n      margin-top: 10px;\n      font-size: 18px;\n      padding: 5px;\n    }\n  </style>\n</head>\n<body>\n\n<div class=\"container\">\n  <h1>Voice Quiz Game</h1>\n  <input type=\"text\" id=\"nameInput\" placeholder=\"Enter your name\" />\n  <button id=\"startGame\" onclick=\"startGame()\">Start Game</button>\n  <p id=\"question\">Loading Question...</p>\n  <p id=\"status\"></p>\n  <p class=\"hint\" id=\"hint\"></p>\n  <p id=\"score\">Score: 0</p>\n</div>\n\n<script src=\"game.js\"></script>\n\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Voice Quiz Game</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      margin: 0;\n      background-color: #f0f4f8;\n      flex-direction: column;\n    }\n\n    .container {\n      text-align: center;\n      max-width: 600px;\n    }\n\n    h1 {\n      color: #333;\n    }\n\n    button {\n      background-color: #4CAF50;\n      color: white;\n      padding: 10px 20px;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      font-size: 18px;\n      margin-top: 20px;\n    }\n\n    button:disabled {\n      background-color: #ddd;\n      cursor: not-allowed;\n    }\n\n    .hint {\n      margin-top: 20px;\n      font-size: 20px;\n      color: #555;\n    }\n\n    #status {\n      font-size: 18px;\n      margin-top: 15px;\n      color: #888;\n    }\n\n    #score {\n      font-size: 22px;\n      margin-top: 20px;\n      color: #333;\n    }\n\n    #nameInput {\n      margin-top: 10px;\n      font-size: 18px;\n      padding: 5px;\n    }\n  </style>\n\n\n\n<div class=\"container\">\n  <h1>Voice Quiz Game</h1>\n  <input type=\"text\" id=\"nameInput\" placeholder=\"Enter your name\" disabled=\"\">\n  <button id=\"startGame\" onclick=\"startGame()\" disabled=\"\">Start Game</button>\n  <p id=\"question\">fasdf, Who is known as the father of computers?</p>\n  <p id=\"status\">Please say your answer now.</p>\n  <p class=\"hint\" id=\"hint\">Hint: undefined</p>\n  <p id=\"score\">Score: 10</p>\n</div>\n\n<script src=\"game.js\"></script>\n\n\n\n",
      "type": "html"
    },
    {
      "code": "// Web Speech API setup\nconst synth = window.speechSynthesis;\nconst recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\nrecognition.lang = 'en-US';\n\nlet questionIndex = 0;\nlet hintsGiven = 0;\nlet score = 0;\nlet playerName = \"\";\n\n// Define the quiz questions and their hints from the domain of computer science\nconst questions = [\n  {\n    question: \"What is the full form of CPU?\",\n    answer: \"central processing unit\",\n    hints: [\n      \"It's known as the brain of the computer.\",\n      \"It handles all instructions from software and hardware.\",\n      \"It is abbreviated as CPU.\"\n    ]\n  },\n  {\n    question: \"Who is known as the father of computers?\",\n    answer: \"charles babbage\",\n    hints: [\n      \"He was an English polymath.\",\n      \"He invented the concept of a programmable computer.\",\n      \"His first name is Charles.\"\n    ]\n  },\n  {\n    question: \"What does HTML stand for?\",\n    answer: \"hypertext markup language\",\n    hints: [\n      \"It is used to structure web pages.\",\n      \"It contains tags and elements.\",\n      \"It is abbreviated as HTML.\"\n    ]\n  },\n  {\n    question: \"What is the main function of RAM in a computer?\",\n    answer: \"temporary storage\",\n    hints: [\n      \"It is used for short-term memory.\",\n      \"Data in it is lost when the computer turns off.\",\n      \"It allows quick read and write operations.\"\n    ]\n  },\n  {\n    question: \"What programming language is known for its snake logo?\",\n    answer: \"python\",\n    hints: [\n      \"It is popular for data science and web development.\",\n      \"It is named after a type of reptile.\",\n      \"Its logo features a snake.\"\n    ]\n  }\n];\n\n// Function to start the game\nfunction startGame() {\n  playerName = document.getElementById(\"nameInput\").value.trim();\n  if (!playerName) {\n    alert(\"Please enter your name to start the game.\");\n    return;\n  }\n  document.getElementById(\"startGame\").disabled = true;\n  document.getElementById(\"nameInput\").disabled = true;\n  questionIndex = 0;\n  hintsGiven = 0;\n  score = 0;\n  updateScore();\n  showNextQuestion();\n}\n\n// Function to speak text with delay\nfunction speak(text, callback) {\n  const utterance = new SpeechSynthesisUtterance(text);\n  utterance.onstart = () => {\n    document.getElementById(\"status\").innerText = \"Please wait...\";\n  };\n  utterance.onend = () => {\n    document.getElementById(\"status\").innerText = \"Please say your answer now.\";\n    if (callback) callback();\n  };\n  synth.speak(utterance);\n}\n\n// Function to show the next question\nfunction showNextQuestion() {\n  const question = questions[questionIndex];\n  if (hintsGiven === 0) {\n    const questionText = `${playerName}, ${question.question}`;\n    document.getElementById(\"question\").innerText = questionText;\n    speak(questionText, () => {\n      startListening();\n    });\n  } else {\n    const hintText = question.hints[hintsGiven];\n    document.getElementById(\"hint\").innerText = `Hint: ${hintText}`;\n    speak(hintText, () => {\n      startListening();\n    });\n  }\n}\n\n// Function to start listening\nfunction startListening() {\n  recognition.start();\n  console.log(\"Speech recognition started... Listening for your answer...\");\n}\n\n// Event handler for speech recognition result\nrecognition.onresult = (event) => {\n  const playerAnswer = event.results[0][0].transcript.toLowerCase();\n  console.log(\"Player said: \" + playerAnswer);  // Debugging the player's spoken answer\n  \n  const correctAnswer = questions[questionIndex].answer.toLowerCase();\n\n  if (playerAnswer === correctAnswer) {\n    console.log(\"Correct answer detected!\");\n    speak(\"Correct!\", () => {\n      document.getElementById(\"status\").innerText = \"Correct! Moving to next question...\";\n      score += 10;\n      updateScore();\n      hintsGiven = 0; // Reset hints for next question\n      setTimeout(nextQuestion, 1500);\n    });\n  } else {\n    console.log(\"Incorrect answer, providing next hint...\");\n    hintsGiven++;\n    if (hintsGiven < 3) {\n      speak(\"Try again. Here's another hint.\", () => {\n        showNextQuestion();\n      });\n    } else {\n      speak(`Sorry, the correct answer is ${correctAnswer}.`, () => {\n        setTimeout(nextQuestion, 2000);\n      });\n    }\n  }\n};\n\n// Function to go to the next question\nfunction nextQuestion() {\n  questionIndex++;\n  if (questionIndex < questions.length) {\n    showNextQuestion();\n  } else {\n    endGame();\n  }\n}\n\n// Function to end the game and announce the score\nfunction endGame() {\n  speak(`Game over, ${playerName}. Your final score is ${score}.`);\n  document.getElementById(\"status\").innerText = `Game over, ${playerName}. Your final score is ${score}.`;\n}\n\n// Function to update the score display\nfunction updateScore() {\n  document.getElementById(\"score\").innerText = `Score: ${score}`;\n}\n",
      "status": "[5]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "(event) =&gt; {\n  const playerAnswer = event.results[0][0].transcript.toLowerCase();\n  console.log(\"Player said: \" + playerAnswer);  // Debugging the player's spoken answer\n  \n  const correctAnswer = questions[questionIndex].answer.toLowerCase();\n\n  if (playerAnswer === correctAnswer) {\n    console.log(\"Correct answer detected!\");\n    speak(\"Correct!\", () =&gt; {\n      document.getElementById(\"status\").innerText = \"Correct! Moving to next question...\";\n      score += 10;\n      updateScore();\n      hintsGiven = 0; // Reset hints for next question\n      setTimeout(nextQuestion, 1500);\n    });\n  } else {\n    console.log(\"Incorrect answer, providing next hint...\");\n    hintsGiven++;\n    if (hintsGiven &lt; 3) {\n      speak(\"Try again. Here's another hint.\", () =&gt; {\n        showNextQuestion();\n      });\n    } else {\n      speak(`Sorry, the correct answer is ${correctAnswer}.`, () =&gt; {\n        setTimeout(nextQuestion, 2000);\n      });\n    }\n  }\n} <br>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}